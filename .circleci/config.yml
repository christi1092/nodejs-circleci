version: 2.1                          # 2.16 is the latest version

jobs:                                 # collective within your pipeline
  run_tests:                          # job called "run_tests"
    docker:                           # defines where the source code is gonna run -> executors
                                      # 4 types of executors: 
                                        # docker image where the code will be tested, run, built and executed
                                        # machine alias for vm (if you need more horsepower)
                                        # macOS for testing iOS applications, Swift code
                                        # Windows
      - image: circleci/node:10       # defines the actual environment where our code will run -> node 10 image
    steps:
      - checkout                                # alias for gitclone
      - run:                                    # install npm dependencies
          name: Install npm dependencies        # run the commands inside the file
          command: |                            # installs the dependencies defined in package.json
            npm install --save                  

      - run:
          name: Run Unit Tests
          command: |                             # below we are calling mocha which is installes with the previous step
            ./node_modules/mocha/bin/mocha test/ --reporter mochawesome --reporter-options reportDir=test-results,reportFilename=test-results
      - store_test_results:                       # above mocka shall look into test folder
                                                  # mochawesome creates a HTML page for the results of the tests
                                                  # don't forget to add mochawesome to dependencies (!)
                                                  # reportDir creates new folder with specified filename
                                                  # store_test_results tells CircleCI to grab everything that is in the test results and use it as a test result
                                                  
          path: test-results
      - store_artifacts:
          path: test_results
                                                  # grab all the files and attaching them to the build in the dashboard
workflows:                                      # way to tie all the jobs together
    build_test:                                 # workflow called build_test
        jobs:                                   # workflow needs jobs
            - run_tests                         # name of the job above
              



